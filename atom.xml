<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>blog.kaictl</title>
    <link href="https://blog.kaictl.me/atom.xml" rel="self"/>
    <link href="https:&#x2F;&#x2F;blog.kaictl.me"/>
    <updated>2025-09-13T06:42:08+0000</updated>
    <id>https:&#x2F;&#x2F;blog.kaictl.me</id>

    
    
    
    
        
    
        
    
    
    
        
        
            
            <entry>
                <title>Using NixOS and Nix</title>
                <link href="https:&#x2F;&#x2F;blog.kaictl.me&#x2F;blog&#x2F;nix&#x2F;"/>
                <updated>2025-09-12T00:00:00+0000</updated>
                <id>https:&#x2F;&#x2F;blog.kaictl.me&#x2F;blog&#x2F;nix&#x2F;</id>
                <content type="html">&amp;lt;p&amp;gt;When I first started using Nix in the early 2010’s I thought it was amazing. I had been using Arch and pacman, writing &amp;lt;code&amp;gt;PKGBUILD&amp;lt;&amp;#x2F;code&amp;gt;s and submitting &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;aur.archlinux.org&amp;quot;&amp;gt;AUR&amp;lt;&amp;#x2F;a&amp;gt; packages before they switched to using git. I was making the switch from Bash to Zsh, learning about shell completions and debugging random C code because my &amp;lt;code&amp;gt;dwm&amp;lt;&amp;#x2F;code&amp;gt; crashed again. My goal at the time was to start writing code, but one thing that kept hindering me every time was the coding environments. While languages like Rust and Go have their own, first-party build systems, it’s so much more of a wild west with things like Python, even back then.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;The first reason that I tried Nix was just to create shells for developing python during the 2-to-3 switchover at the time. After using it I was hooked. It did exactly what I wanted. When I ended up switching back to Arch it was really due to problems with Nix from a decade ago, and now that I have returned I can see how much it has improved.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;I won’t be touching on the drama surrounding Nix and the split that went on, I want to just keep this technical.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;centralized&amp;quot;&amp;gt;Centralized&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;The main reason I came back to nix was the centralization. I had spent years getting my systems set up, making sure everything connected with my system, modifying &amp;lt;code&amp;gt;yaml&amp;lt;&amp;#x2F;code&amp;gt;, &amp;lt;code&amp;gt;toml&amp;lt;&amp;#x2F;code&amp;gt;, &amp;lt;code&amp;gt;json&amp;lt;&amp;#x2F;code&amp;gt;, &amp;lt;code&amp;gt;ini&amp;lt;&amp;#x2F;code&amp;gt; and other crazy formats for configuration. But every single one was so different, not because the underlying language might be different, but everything I wanted to work on had a different subset of features they wanted, or different ways of dealing with paths (absolute, home-relative, config-file relative, etc.), or different formats for colors (hex, integer, or something else), and so much more. And this doesn’t even get me started on services, installations, containers, and more.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Nix simplifies everything for this. Just for a quick and easy example, I have a terminal and I use zellij in that terminal. I want the color scheme to be exactly the same, but if I was going to do that in the &amp;lt;code&amp;gt;.kdl&amp;lt;&amp;#x2F;code&amp;gt; and &amp;lt;code&amp;gt;.toml&amp;lt;&amp;#x2F;code&amp;gt; file for the two components, modify each of their themes and then make sure it’s all equivalent and I didn’t miss a color. Compared to using this in Nix, I can have a centralized &amp;lt;code&amp;gt;colors.nix&amp;lt;&amp;#x2F;code&amp;gt; file that defines my base colors, and even functions to get bright&amp;#x2F;dim colors and add alpha layers. From there I can create the configurations for both &amp;lt;code&amp;gt;zellij&amp;lt;&amp;#x2F;code&amp;gt; and &amp;lt;code&amp;gt;rio&amp;lt;&amp;#x2F;code&amp;gt; that use my color scheme, and all the changes I want to make happen just in the &amp;lt;code&amp;gt;colors.nix&amp;lt;&amp;#x2F;code&amp;gt; file. Changes here reverberate through my whole system, changing lock screen colors, waybar css, helix theme, and even the TTY’s 16 color theme.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;nix&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-nix &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-nix&amp;quot; data-lang=&amp;quot;nix&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;let
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;  &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8ec07c;&amp;quot;&amp;gt;theme &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;rec &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;{
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8ec07c;&amp;quot;&amp;gt;primary &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;{
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;      &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8ec07c;&amp;quot;&amp;gt;background &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;rec &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;{ &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8ec07c;&amp;quot;&amp;gt;hex &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;000000&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8ec07c;&amp;quot;&amp;gt;int &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;hexToInt hex&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;; };
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;      &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8ec07c;&amp;quot;&amp;gt;foreground &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;rec &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;{ &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8ec07c;&amp;quot;&amp;gt;hex &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;fffbf6&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8ec07c;&amp;quot;&amp;gt;int &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;hexToInt hex&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;; };
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    };
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# ...
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;  };
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;in
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;{
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;  &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# Hexes just gets the hex value and puts a # before it for formatting
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;  &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8ec07c;&amp;quot;&amp;gt;alacritty&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;.&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8ec07c;&amp;quot;&amp;gt;color &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;mapAttrs &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;_&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;hexes&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;) &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;theme&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;  &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# ...
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;This is great for a single machine, but the power multiples with each computer that you want to manage. Both my personal and work machines have the same settings and services enabled, with overrides or extras able to be defined on a per-node basis. Even my virtual machines and serve nodes can be set up with all the desktop software removed or only specific services enabled, and I know that my keys are all set up, my terminal will feel right and everything will Just Work. On top of that, if you get them set up correctly, sharing packages between machines is trivial, so you only ever have to build things once.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;consistent&amp;quot;&amp;gt;Consistent&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;My previous machines used to be set up with some quick scripts or maybe some git clones of a dotfile repo or two with symlinks in a few places. This was fine, but every time I would go on a vacation or get sucked into doing work for a whole week without touching my personal machine, they would get horribly out of sync. And not just in their configuration, but also the package versions. Dealing with that was (at least on Arch) a bit of a nightmare, especially using software that had configuration syntax changes or major version bumps. At any time a &amp;lt;code&amp;gt;pacman -Syu&amp;lt;&amp;#x2F;code&amp;gt; on one machine could break the configs that I had, and unless I did that at the exact same time, it could break &amp;lt;em&amp;gt;again&amp;lt;&amp;#x2F;em&amp;gt; on the other machine if there’s another update.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Using a flake in my &amp;lt;code&amp;gt;&amp;#x2F;etc&amp;#x2F;nixos&amp;lt;&amp;#x2F;code&amp;gt; configuration lets me be overly confident that all of my software and configs will work together, since the packages are kept pinned by the &amp;lt;code&amp;gt;flake.lock&amp;lt;&amp;#x2F;code&amp;gt; file. And I’m no longer worried about waiting to update my work laptop, since as longas I pull the same commit from my repository, it will be the same versions all the way down to the kernel.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;customizability&amp;quot;&amp;gt;Customizability&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;Having the &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;repology.org&amp;#x2F;repositories&amp;#x2F;graphs&amp;quot;&amp;gt;latest software&amp;lt;&amp;#x2F;a&amp;gt; is great, but sometimes I want stuff that’s even more recent, or that does something different. Getting the latest build of a Cargo crate or rebuilding something with a feature changed is so simple for me. And this applies even to things that you would think would cause major issues. I could, with a few simple lines, change my entire system from using &amp;lt;code&amp;gt;glibc&amp;lt;&amp;#x2F;code&amp;gt; to &amp;lt;code&amp;gt;musl&amp;lt;&amp;#x2F;code&amp;gt;, and it would change every package on my system. If I need to change a library to have a new feature, I can change that for &amp;lt;em&amp;gt;every&amp;lt;&amp;#x2F;em&amp;gt; one of the packges I use that depends on it seamlessly. I also have the choice to &amp;lt;em&amp;gt;not&amp;lt;&amp;#x2F;em&amp;gt; do this, and make custom overrides only for specific packages. Overriding something like the &amp;lt;code&amp;gt;rustToolchain&amp;lt;&amp;#x2F;code&amp;gt; causes a lot of applications to rebuild, but if I only need it for some specific package, then I can choose to change it only for that package or set of packages.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;okay-i-get-all-that-but-i-like-my-system&amp;quot;&amp;gt;“Okay, I get all that, but I like my system.”&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;Great! There’s nothing wrong with that at all. You can literally use almost all of the stuff I mentioned above on any distribution of Linux or on OSX&amp;#x2F;Darwin, and if you look at the &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;nix.dev&amp;#x2F;manual&amp;#x2F;nix&amp;#x2F;2.28&amp;#x2F;development&amp;#x2F;building.html#platforms&amp;quot;&amp;gt;systems&amp;lt;&amp;#x2F;a&amp;gt; available, you can use this pretty much anywhere. Windows might be the only place it can’t directly work, but with modern WSL it works smoothly there for that side of things.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Right now I use varying levels Nixification on different systems:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;Personal laptop: 100% NixOS on x86-64&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;Work laptop: 100% NixOS on x86-64&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;Mac Mini M4: &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;nix-darwin&amp;#x2F;nix-darwin&amp;quot;&amp;gt;nix-darwin&amp;lt;&amp;#x2F;a&amp;gt; with all native aarch64-darwin packages&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;My homelab VM’s: NixOS on all of them, except the Talos cluster&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;My homelab hypervisors: Proxmox with Nix set up using home-manager&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;&amp;#x2F;ul&amp;gt;
&amp;lt;p&amp;gt;So even if you’re on Ubuntu but think “I want to configure part of my system that way”, you can do that! Nix doesn’t have to exist as the only package manager on the machine due to how it is set up with the &amp;lt;code&amp;gt;&amp;#x2F;nix&amp;lt;&amp;#x2F;code&amp;gt; directory, so if you just want to always make sure you have the &amp;lt;em&amp;gt;correct&amp;lt;&amp;#x2F;em&amp;gt; configuration for your local shell and the shell on your remote dev machine, you can do that with some super easy configuration.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;problems&amp;quot;&amp;gt;Problems&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;Nix isn’t perfect. My main gripe is the ease of using external configurations, themes or packages. Luckily there aren’t that may external packages, but to properly get things installed it does take a few minutes to write up a &amp;lt;code&amp;gt;.nix&amp;lt;&amp;#x2F;code&amp;gt; file and include it in my system packages. External configurations and themes are also a pain, though I’ve seen more and more themes and such include a &amp;lt;code&amp;gt;flake.nix&amp;lt;&amp;#x2F;code&amp;gt; now.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;There’s also a bit of a problem with the speed. Sometimes I want to make a quick change to something, but it does take a good few seconds to run a &amp;lt;code&amp;gt;nixos-rebuild test&amp;lt;&amp;#x2F;code&amp;gt;, though all the same ways of configuring something do still exist. Sometimes I’ll go and remove the symlinks that nix or home-manager put in my home directory to make changes direclty to the file, especially if the application has the ability to live-reload from that file, but for the most part it’s honestly fine. I find myself making less and less changes as everything solidifies, and when I do make changes I know what I do is going to work.&amp;lt;&amp;#x2F;p&amp;gt;
</content>
            </entry>
            
        
    
</feed>
